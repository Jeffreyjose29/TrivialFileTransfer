import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketAddress;
import java.net.SocketTimeoutException;
import java.nio.ByteBuffer;

public class TftpClient
{
	private String file;
	private InetAddress inetAddress;
	private int portNumber;
	private DatagramSocket socket;
	
	byte initialAcknowledgement;
	byte packetType;
	byte blockSequence;
	
	
	public static void main(String args[]) throws IOException
	{
		try {
			TftpClient tftpClient = new TftpClient();	//Make a new instance of a TftpClient object
			tftpClient.get(args);				//Get the arguments from the terminal
			tftpClient.run();				//Call the run method
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	//Get the filename, server address and port number from the terminal
	public void get(String[] args) throws IOException
	{
		//if the length of the argument is 3
		if(args.length == 3) {
			file = args[0];										//First argument should be the file name
			inetAddress = InetAddress.getByName(args[1]);		//Second argument should the address of the server
			portNumber = Integer.parseInt(args[2]);				//Third argument should be the port number generated by the server
		}
		else {
			System.out.println("Usage: <Filename> <Server Address> <Port Number>");		//Print message if done incorrectly and close the program
			System.exit(0);
		}
	}

	//Method to handle sending an acknowledgement
	public void sendAcknowledgement(byte acknowledgeSeq, DatagramPacket address) throws Exception
	{
		byte[] Ack = {acknowledgeSeq};														//The sequence nummber is stored in an array. Packets can only take bytes.
		
		DatagramPacket ack = TftpUtility.packDatagramPacket(TftpUtility.ACK, Ack);			//Make the packet

		//Assign an address and port destination for the packets
		ack.setAddress(address.getAddress());
		ack.setPort(address.getPort());
		
		socket.send(ack);																	//Port number and address can be used as parameters when writing the statement java TftpClient ...
		

		//Print the following statements
		System.out.println("Block Number Recieved: " + acknowledgeSeq);
		System.out.println("Send Acknowledgement Number: " + acknowledgeSeq);
	}
	
	public void recieveFile(DatagramPacket recievedPacket) throws Exception
	{
		initialAcknowledgement = 0;		//The very first acknowledgement must always be 0
		
		File createFile = new File(file);	//Making a new file so the output can be written
		createFile.createNewFile();
		
		FileOutputStream writer = new FileOutputStream(createFile);		//Output stream so we can write to a new file
		while(true)
		{
			socket.setSoTimeout(5000);					//If process hasnt been recieved within 5 seconds, throw a RTO
			socket.receive(recievedPacket);					//The client should recieve the packet that was sent by the user
			packetType = TftpUtility.checkPacketType(recievedPacket);	//Checks to see what the type of packet it is
			
			//If the packet type is an Error
			if(packetType == TftpUtility.ERROR) {
				System.out.println("An Error Has Occurred");		//An error has occurred and acknowledgement wasnt recieved properly
				writer.close();						//Close the outputstream
				System.exit(0);						//Exit the program
			}

			//If the packet type is a Data
			else if(packetType == TftpUtility.DATA) {
				blockSequence = TftpUtility.extractBlockSeq(recievedPacket);		//Extract the sequence number and store in variable
				
				//if the sequence number is not equal to the previous acknowledgement number
				if(blockSequence != initialAcknowledgement) {
					sendAcknowledgement(blockSequence, recievedPacket);		//Send the acknowledgement
					
					initialAcknowledgement = blockSequence;				//Set the previous acknowledgement to the sequence number of the previous transmission
					
					byte[] dataArray = recievedPacket.getData();			//An array that stores the data from the packet
					
					writer.write(dataArray, 2, recievedPacket.getLength()-2);	//Write to the file 
					

					//If it is the last packet
					if(isLastPacket(recievedPacket)) {
						System.out.println("The file has been fully passed");		//Print the message
						writer.close();							//Close the file outputstream
						System.exit(0);							//Exit the program
					}
					else {
					}					
				}
				else {
					sendAcknowledgement(blockSequence, recievedPacket);		//Resend the acknowledgement to make up for the lost one
					
					//System.out.println("testing");
					

					//Display message
					System.out.println("Acknowledgement was lost and resending in process, Acknowledgement No.: " + initialAcknowledgement);
				}
			}
		}
	}
	
	//Method to check the last packet is sent
	public boolean isLastPacket(DatagramPacket recievedPacket)
	{
		if(recievedPacket.getLength() < 512)		//if the length is less than 512, then it is the last packet
		{
			return true;							//return true
		}
		else
		{
			return false;							//return false
		}
	}

	//run method called in the main
	public void run() 
	{
		try{
			DatagramPacket sendRequest = TftpUtility.packDatagramPacket(TftpUtility.RRQ, file.getBytes());
			DatagramPacket recievedPacket = new DatagramPacket(new byte[514], 514);			//Contains the response of the server
			
			sendRequest.setAddress(inetAddress);
			sendRequest.setPort(portNumber);
			
			socket = new DatagramSocket();			//Socket object to send and recieve
			socket.send(sendRequest);				//Send to the server
			recieveFile(recievedPacket);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
}
